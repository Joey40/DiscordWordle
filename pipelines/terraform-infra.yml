# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  - name: terraformVersion
    value: 1.3.6
  - name: serviceConnection
    value: WordleBot
  - name: outFile
    value: $(System.StageName).$(Build.BuildNumber).tfplan
  - name: terraformDir
    value: $(System.DefaultWorkingDirectory)/terraform

stages:
  - stage: Terraform_Plan
    jobs:
      - job: Terraform_Plan
        steps: 

           - task: AzureCLI@2
             displayName: az login
             inputs:
               azureSubscription: ${{ variables.serviceConnection }}
               scriptType: bash
               scriptLocation: inlineScript
               addSpnToEnvironment: true
               inlineScript: |
                 set -eu  # fail on error
                 subscriptionId=$(az account show --query id -o tsv)
                 echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$servicePrincipalId"
                 echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]$servicePrincipalKey"
                 echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$subscriptionId"
                 echo "##vso[task.setvariable variable=ARM_TENANT_ID]$tenantId"
        
           - task: TerraformInstaller@0
             displayName: Terraform - install v${{ variables.terraformVersion }}
             inputs:
               terraformVersion: ${{ variables.terraformVersion }}

           - task: Bash@3
             displayName: Terraform init
             inputs:
               workingDirectory: ${{ variables.terraformDir }}
               targetType: 'inline'
               script: |
                terraform init -input=false
             env:
               ARM_SUBSCRIPTION_ID:  $(ARM_SUBSCRIPTION_ID)
               ARM_CLIENT_ID:        $(ARM_CLIENT_ID)
               ARM_CLIENT_SECRET:    $(ARM_CLIENT_SECRET)
               ARM_TENANT_ID:        $(ARM_TENANT_ID)

           - task: Bash@3
             displayName: Terraform plan
             inputs:
               workingDirectory: ${{ variables.terraformDir }}
               targetType: 'inline'
               script: |
                terraform plan -out "${{ variables.outFile }}"
             env:
               ARM_SUBSCRIPTION_ID:  $(ARM_SUBSCRIPTION_ID)
               ARM_CLIENT_ID:        $(ARM_CLIENT_ID)
               ARM_CLIENT_SECRET:    $(ARM_CLIENT_SECRET)
               ARM_TENANT_ID:        $(ARM_TENANT_ID)
               
  - stage: Manual_Approval
    jobs:
      - job: Manual_Approval
        timeoutInMinutes: 4320 # job times out in 3 days
        pool: server  
        steps: 
          - task: ManualValidation@0
            timeoutInMinutes: 1440 # task times out in 1 day
            inputs:
              instructions: "Review the terraform plan output before approving the apply stage."
              onTimeout: 'reject'
              
  - stage: Terraform_Apply
    jobs:
      - job: Terraform_Apply
        steps: 

           - task: AzureCLI@2
             displayName: az login
             inputs:
               azureSubscription: ${{ variables.serviceConnection }}
               scriptType: bash
               scriptLocation: inlineScript
               addSpnToEnvironment: true
               inlineScript: |
                 set -eu  # fail on error
                 subscriptionId=$(az account show --query id -o tsv)
                 echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$servicePrincipalId"
                 echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]$servicePrincipalKey"
                 echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$subscriptionId"
                 echo "##vso[task.setvariable variable=ARM_TENANT_ID]$tenantId"
                 
           - task: Bash@3
             displayName: Terraform plan
             inputs:
               workingDirectory: ${{ variables.terraformDir }}
               targetType: 'inline'
               script: |
                terraform apply "${{ variables.outFile }}"
             env:
               ARM_SUBSCRIPTION_ID:  $(ARM_SUBSCRIPTION_ID)
               ARM_CLIENT_ID:        $(ARM_CLIENT_ID)
               ARM_CLIENT_SECRET:    $(ARM_CLIENT_SECRET)
               ARM_TENANT_ID:        $(ARM_TENANT_ID)
